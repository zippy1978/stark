name: Build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CC: /usr/bin/clang
  CXX: /usr/bin/clang++
  CTEST_OUTPUT_ON_FAILURE: 1 

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04, macos-10.15]

    steps:
    
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
          python-version: 3.8
    
    - name: Install tools
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update 
              sudo apt-get -y install git cmake bison libfl-dev flex ninja-build
              sudo apt-get purge --auto-remove llvm
              wget https://apt.llvm.org/llvm.sh
              chmod +x llvm.sh
              sudo ./llvm.sh 10
              echo LLVM default version is $(/usr/bin/llvm-config-10 --version)
         else
              brew install cmake
              brew install conan
              brew install llvm
              brew install flex
              brew install bison
              brew install ninja
         fi
    
    - name: Install conan
      run: pip3 install conan
      
    - name: Create build directory
      run: mkdir -p ${{github.workspace}}/build
      
    - name: Install dependencies
      working-directory: ${{github.workspace}}/build
      run: conan install ..

    - name: Create build environment
      working-directory: ${{github.workspace}}/build
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
              cmake -GNinja .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DVERSION_SUFFIX="SNAPSHOT" -DLLVM_DIR="$(/usr/bin/llvm-config-10 --cmakedir)"
         else
              cmake -GNinja .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DVERSION_SUFFIX="SNAPSHOT"
         fi

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ninja

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ninja test
     
    - name: Read version
      working-directory: ${{github.workspace}}
      shell: bash
      run: echo "stark_version=$(cat VERSION)" >> $GITHUB_ENV
    
    - name: Archive
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ninja archive
        
    - name: Upload snapshot binaries
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'macos-10.15'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/Stark*.zip
        tag: ${{env.stark_version}}-SNAPSHOT
        overwrite: true
        body: "Snapshot release"
        file_glob: true
        prerelease: true

  build-runtimes:
    runs-on: ubuntu-latest
    needs: build

    steps:

      - uses: docker-practice/actions-setup-docker@master

      - name: Checkout cross compilation project
        uses: actions/checkout@master
        with:
          repository: zippy1978/stark-cross-compilation

        
      - name: Build runtimes
        working-directory: ${{github.workspace}}/runtime
        shell: bash
        run: make STARK_BRANCH=${GITHUB_REF#refs/heads/}
        
      - name: Read Stark version
        working-directory: ${{github.workspace}}/runtime/build/stark
        shell: bash
        run: echo "stark_version=$(cat VERSION)" >> $GITHUB_ENV
        
      - name: Archive
        working-directory: ${{github.workspace}}/runtime
        shell: bash
        run: make archive
        
      - name: Rename archive
        working-directory: ${{github.workspace}}/runtime/build
        shell: bash
        run: mv archive.zip Stark-Runtimes-${{env.stark_version}}-SNAPSHOT.zip
          
      - name: Upload runtime snapshot binaries
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{github.workspace}}/runtime/build/Stark*.zip
          tag: ${{env.stark_version}}-SNAPSHOT
          overwrite: true
          body: "Snapshot release"
          file_glob: true
          prerelease: true
