name: Build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CC: /usr/bin/clang
  CXX: /usr/bin/clang++
  CTEST_OUTPUT_ON_FAILURE: 1 

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04, macos-10.15]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Install tools
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update 
              sudo apt-get -y install git cmake bison libfl-dev flex ninja-build
              sudo apt-get purge --auto-remove llvm
              wget https://apt.llvm.org/llvm.sh
              chmod +x llvm.sh
              sudo ./llvm.sh 10
              echo LLVM default version is $(/usr/bin/llvm-config-10 --version)
         else
              brew install cmake
              brew install conan
              brew install llvm
              brew install flex
              brew install bison
              brew install ninja
         fi
    
    - name: Install conan
      run: pip3 install conan
      
    - name: Create build directory
      run: mkdir -p ${{github.workspace}}/build
      
    - name: Install dependencies
      working-directory: ${{github.workspace}}/build
      run: conan install ..

    - name: Create build environment
      working-directory: ${{github.workspace}}/build
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
              cmake -GNinja .. -DLLVM_DIR="$(/usr/bin/llvm-config-10 --cmakedir)"
         else
              cmake -GNinja ..
         fi

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: ninja

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ninja test
    
    - name: Archive
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ninja archive  
    - uses: actions/upload-artifact@v2
      with:
        name: archive-${{matrix.os}}
        path: ${{github.workspace}}/build/Stark*.zip
